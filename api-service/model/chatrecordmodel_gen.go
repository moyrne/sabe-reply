// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatRecordFieldNames          = builder.RawFieldNames(&ChatRecord{})
	chatRecordRows                = strings.Join(chatRecordFieldNames, ",")
	chatRecordRowsExpectAutoSet   = strings.Join(stringx.Remove(chatRecordFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	chatRecordRowsWithPlaceHolder = strings.Join(stringx.Remove(chatRecordFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheChatRecordIdPrefix = "cache:chatRecord:id:"
)

type (
	chatRecordModel interface {
		Insert(ctx context.Context, data *ChatRecord) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ChatRecord, error)
		Update(ctx context.Context, data *ChatRecord) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChatRecordModel struct {
		sqlc.CachedConn
		table string
	}

	ChatRecord struct {
		Id         int64     `db:"id"`
		CreatedAt  time.Time `db:"created_at"`
		Kind       string    `db:"kind"` // {"personal":"个人","group":"群聊"}
		Sender     string    `db:"sender"`
		Receiver   string    `db:"receiver"`
		Content    string    `db:"content"`
		RawContent string    `db:"raw_content"`
	}
)

func newChatRecordModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultChatRecordModel {
	return &defaultChatRecordModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`chat_record`",
	}
}

func (m *defaultChatRecordModel) Insert(ctx context.Context, data *ChatRecord) (sql.Result, error) {
	chatRecordIdKey := fmt.Sprintf("%s%v", cacheChatRecordIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, chatRecordRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CreatedAt, data.Kind, data.Sender, data.Receiver, data.Content, data.RawContent)
	}, chatRecordIdKey)
	return ret, err
}

func (m *defaultChatRecordModel) FindOne(ctx context.Context, id int64) (*ChatRecord, error) {
	chatRecordIdKey := fmt.Sprintf("%s%v", cacheChatRecordIdPrefix, id)
	var resp ChatRecord
	err := m.QueryRowCtx(ctx, &resp, chatRecordIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatRecordRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatRecordModel) Update(ctx context.Context, data *ChatRecord) error {
	chatRecordIdKey := fmt.Sprintf("%s%v", cacheChatRecordIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chatRecordRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CreatedAt, data.Kind, data.Sender, data.Receiver, data.Content, data.RawContent, data.Id)
	}, chatRecordIdKey)
	return err
}

func (m *defaultChatRecordModel) Delete(ctx context.Context, id int64) error {
	chatRecordIdKey := fmt.Sprintf("%s%v", cacheChatRecordIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, chatRecordIdKey)
	return err
}

func (m *defaultChatRecordModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheChatRecordIdPrefix, primary)
}

func (m *defaultChatRecordModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatRecordRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultChatRecordModel) tableName() string {
	return m.table
}
