// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: sabeagent.proto

package sabeagent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SabeAgentClient is the client API for SabeAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SabeAgentClient interface {
	SabeReply(ctx context.Context, in *SabeReplyRequest, opts ...grpc.CallOption) (*SabeReplyResponse, error)
}

type sabeAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewSabeAgentClient(cc grpc.ClientConnInterface) SabeAgentClient {
	return &sabeAgentClient{cc}
}

func (c *sabeAgentClient) SabeReply(ctx context.Context, in *SabeReplyRequest, opts ...grpc.CallOption) (*SabeReplyResponse, error) {
	out := new(SabeReplyResponse)
	err := c.cc.Invoke(ctx, "/sabeagent.SabeAgent/SabeReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SabeAgentServer is the server API for SabeAgent service.
// All implementations must embed UnimplementedSabeAgentServer
// for forward compatibility
type SabeAgentServer interface {
	SabeReply(context.Context, *SabeReplyRequest) (*SabeReplyResponse, error)
	mustEmbedUnimplementedSabeAgentServer()
}

// UnimplementedSabeAgentServer must be embedded to have forward compatible implementations.
type UnimplementedSabeAgentServer struct {
}

func (UnimplementedSabeAgentServer) SabeReply(context.Context, *SabeReplyRequest) (*SabeReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SabeReply not implemented")
}
func (UnimplementedSabeAgentServer) mustEmbedUnimplementedSabeAgentServer() {}

// UnsafeSabeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SabeAgentServer will
// result in compilation errors.
type UnsafeSabeAgentServer interface {
	mustEmbedUnimplementedSabeAgentServer()
}

func RegisterSabeAgentServer(s grpc.ServiceRegistrar, srv SabeAgentServer) {
	s.RegisterService(&SabeAgent_ServiceDesc, srv)
}

func _SabeAgent_SabeReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SabeReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SabeAgentServer).SabeReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sabeagent.SabeAgent/SabeReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SabeAgentServer).SabeReply(ctx, req.(*SabeReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SabeAgent_ServiceDesc is the grpc.ServiceDesc for SabeAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SabeAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sabeagent.SabeAgent",
	HandlerType: (*SabeAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SabeReply",
			Handler:    _SabeAgent_SabeReply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sabeagent.proto",
}
